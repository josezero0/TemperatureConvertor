package es.conversordetemperatura.windows;

import es.conversordetemperatura.TemperatureConvertor;
import javax.swing.JOptionPane;

/**
 *
 * @author Kami
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tempFrom = new javax.swing.ButtonGroup();
        tempTo = new javax.swing.ButtonGroup();
        panelWindow = new javax.swing.JPanel();
        tempFromPanel = new javax.swing.JPanel();
        rbFromCelsius = new javax.swing.JRadioButton();
        rbFromKelvin = new javax.swing.JRadioButton();
        rbFromFahrenheit = new javax.swing.JRadioButton();
        tempToPanel = new javax.swing.JPanel();
        rbToCelsius = new javax.swing.JRadioButton();
        rbToKelvin = new javax.swing.JRadioButton();
        rbToFahrenheit = new javax.swing.JRadioButton();
        txtTemperature = new javax.swing.JTextField();
        txtConvertion = new javax.swing.JTextField();
        btnConvert = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Temperature Convertor");
        setName("window"); // NOI18N

        panelWindow.setBackground(new java.awt.Color(255, 255, 255));

        tempFromPanel.setBackground(new java.awt.Color(255, 255, 255));
        tempFromPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("From"));

        rbFromCelsius.setBackground(new java.awt.Color(255, 255, 255));
        tempFrom.add(rbFromCelsius);
        rbFromCelsius.setText("Celsius");
        rbFromCelsius.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rbFromCelsiusFocusGained(evt);
            }
        });

        rbFromKelvin.setBackground(new java.awt.Color(255, 255, 255));
        tempFrom.add(rbFromKelvin);
        rbFromKelvin.setText("Kelvin");
        rbFromKelvin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rbFromKelvinFocusGained(evt);
            }
        });

        rbFromFahrenheit.setBackground(new java.awt.Color(255, 255, 255));
        tempFrom.add(rbFromFahrenheit);
        rbFromFahrenheit.setText("Fahrenheit");
        rbFromFahrenheit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rbFromFahrenheitFocusGained(evt);
            }
        });

        javax.swing.GroupLayout tempFromPanelLayout = new javax.swing.GroupLayout(tempFromPanel);
        tempFromPanel.setLayout(tempFromPanelLayout);
        tempFromPanelLayout.setHorizontalGroup(
            tempFromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempFromPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tempFromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbFromCelsius)
                    .addComponent(rbFromKelvin)
                    .addComponent(rbFromFahrenheit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tempFromPanelLayout.setVerticalGroup(
            tempFromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempFromPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbFromCelsius)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbFromKelvin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbFromFahrenheit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tempToPanel.setBackground(new java.awt.Color(255, 255, 255));
        tempToPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("To"));

        rbToCelsius.setBackground(new java.awt.Color(255, 255, 255));
        tempTo.add(rbToCelsius);
        rbToCelsius.setText("Celsius");
        rbToCelsius.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rbToCelsiusFocusGained(evt);
            }
        });

        rbToKelvin.setBackground(new java.awt.Color(255, 255, 255));
        tempTo.add(rbToKelvin);
        rbToKelvin.setText("Kelvin");
        rbToKelvin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rbToKelvinFocusGained(evt);
            }
        });

        rbToFahrenheit.setBackground(new java.awt.Color(255, 255, 255));
        tempTo.add(rbToFahrenheit);
        rbToFahrenheit.setText("Fahrenheit");
        rbToFahrenheit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rbToFahrenheitFocusGained(evt);
            }
        });

        javax.swing.GroupLayout tempToPanelLayout = new javax.swing.GroupLayout(tempToPanel);
        tempToPanel.setLayout(tempToPanelLayout);
        tempToPanelLayout.setHorizontalGroup(
            tempToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempToPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tempToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbToCelsius)
                    .addComponent(rbToKelvin)
                    .addComponent(rbToFahrenheit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tempToPanelLayout.setVerticalGroup(
            tempToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempToPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbToCelsius)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbToKelvin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbToFahrenheit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtTemperature.setBorder(javax.swing.BorderFactory.createTitledBorder("Temperature"));

        txtConvertion.setEditable(false);
        txtConvertion.setBackground(new java.awt.Color(255, 255, 255));
        txtConvertion.setBorder(javax.swing.BorderFactory.createTitledBorder("Convertion"));

        btnConvert.setText("Convert");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelWindowLayout = new javax.swing.GroupLayout(panelWindow);
        panelWindow.setLayout(panelWindowLayout);
        panelWindowLayout.setHorizontalGroup(
            panelWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelWindowLayout.createSequentialGroup()
                        .addComponent(tempFromPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tempToPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(txtConvertion)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelWindowLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConvert)))
                .addContainerGap())
        );
        panelWindowLayout.setVerticalGroup(
            panelWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelWindowLayout.createSequentialGroup()
                        .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtConvertion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tempFromPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tempToPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnConvert)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbFromCelsiusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rbFromCelsiusFocusGained
        if (rbToCelsius.isSelected()) {
            if (rbFromKelvin.isSelected()) {
                rbToKelvin.setSelected(true);
            }
            if (rbFromFahrenheit.isSelected()) {
                rbToFahrenheit.setSelected(true);
            }
            if (!rbFromKelvin.isSelected() && !rbFromFahrenheit.isSelected()) {
                rbToKelvin.setSelected(true);
            }
        }
    }//GEN-LAST:event_rbFromCelsiusFocusGained

    private void rbFromKelvinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rbFromKelvinFocusGained
        if (rbToKelvin.isSelected()) {
            if (rbFromCelsius.isSelected()) {
                rbToCelsius.setSelected(true);
            }
            if (rbFromFahrenheit.isSelected()) {
                rbToFahrenheit.setSelected(true);
            }
            if (!rbFromCelsius.isSelected() && !rbFromFahrenheit.isSelected()) {
                rbToCelsius.setSelected(true);
            }
        }
    }//GEN-LAST:event_rbFromKelvinFocusGained

    private void rbFromFahrenheitFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rbFromFahrenheitFocusGained
        if (rbToFahrenheit.isSelected()) {
            if (rbFromCelsius.isSelected()) {
                rbToCelsius.setSelected(true);
            }
            if (rbFromKelvin.isSelected()) {
                rbToKelvin.setSelected(true);
            }
            if (!rbFromCelsius.isSelected() && !rbFromKelvin.isSelected()) {
                rbToCelsius.setSelected(true);
            }
        }
    }//GEN-LAST:event_rbFromFahrenheitFocusGained

    private void rbToCelsiusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rbToCelsiusFocusGained
        if (rbFromCelsius.isSelected()) {
            if (rbToKelvin.isSelected()) {
                rbFromKelvin.setSelected(true);
            }
            if (rbToFahrenheit.isSelected()) {
                rbFromFahrenheit.setSelected(true);
            }
            if (!rbToKelvin.isSelected() && !rbToFahrenheit.isSelected()) {
                rbFromKelvin.setSelected(true);
            }
        }
    }//GEN-LAST:event_rbToCelsiusFocusGained

    private void rbToKelvinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rbToKelvinFocusGained
        if (rbFromKelvin.isSelected()) {
            if (rbToCelsius.isSelected()) {
                rbFromCelsius.setSelected(true);
            }
            if (rbToFahrenheit.isSelected()) {
                rbFromFahrenheit.setSelected(true);
            }
            if (!rbToCelsius.isSelected() && !rbToFahrenheit.isSelected()) {
                rbFromCelsius.setSelected(true);
            }
        }
    }//GEN-LAST:event_rbToKelvinFocusGained

    private void rbToFahrenheitFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rbToFahrenheitFocusGained
        if (rbFromFahrenheit.isSelected()) {
            if (rbToCelsius.isSelected()) {
                rbFromCelsius.setSelected(true);
            }
            if (rbToKelvin.isSelected()) {
                rbFromKelvin.setSelected(true);
            }
            if (!rbToCelsius.isSelected() && !rbToKelvin.isSelected()) {
                rbFromCelsius.setSelected(true);
            }
        }
    }//GEN-LAST:event_rbToFahrenheitFocusGained

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
        try {
            int aux = Integer.parseInt(txtTemperature.getText());
            if (rbFromCelsius.isSelected() && rbToKelvin.isSelected()) {
                txtConvertion.setText(String.valueOf(TemperatureConvertor.fromCelsiusToKelvin(aux)));
            }
            if (rbFromCelsius.isSelected() && rbToFahrenheit.isSelected()) {
                txtConvertion.setText(String.valueOf(TemperatureConvertor.fromCelsiusToFahrenheit(aux)));
            }
            if (rbFromKelvin.isSelected() && rbToCelsius.isSelected()) {
                txtConvertion.setText(String.valueOf(TemperatureConvertor.fromKelvinToCelsius(aux)));
            }
            if (rbFromKelvin.isSelected() && rbToFahrenheit.isSelected()) {
                txtConvertion.setText(String.valueOf(TemperatureConvertor.fromKelvinToFahrenheit(aux)));
            }
            if (rbFromFahrenheit.isSelected() && rbToCelsius.isSelected()) {
                txtConvertion.setText(String.valueOf(TemperatureConvertor.fromFahrenheitToCelsius(aux)));
            }
            if (rbFromFahrenheit.isSelected() && rbToKelvin.isSelected()) {
                txtConvertion.setText(String.valueOf(TemperatureConvertor.fromFahrenheitToKelvin(aux)));
            }
            if ((!rbFromCelsius.isSelected() && !rbFromKelvin.isSelected() && !rbFromFahrenheit.isSelected()) || (!rbToCelsius.isSelected() && !rbToKelvin.isSelected() && !rbToFahrenheit.isSelected())) {
                JOptionPane.showMessageDialog(rootPane, "Select a 'From' and a 'To' to convert temperatures", "Error", 0);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Temperature is not numeric. Decimal point is '.'", "Error", 0);
        }
    }//GEN-LAST:event_btnConvertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvert;
    private javax.swing.JPanel panelWindow;
    private javax.swing.JRadioButton rbFromCelsius;
    private javax.swing.JRadioButton rbFromFahrenheit;
    private javax.swing.JRadioButton rbFromKelvin;
    private javax.swing.JRadioButton rbToCelsius;
    private javax.swing.JRadioButton rbToFahrenheit;
    private javax.swing.JRadioButton rbToKelvin;
    private javax.swing.ButtonGroup tempFrom;
    private javax.swing.JPanel tempFromPanel;
    private javax.swing.ButtonGroup tempTo;
    private javax.swing.JPanel tempToPanel;
    private javax.swing.JTextField txtConvertion;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables
}
